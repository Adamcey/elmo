MINOR
create response
destroy response
clean up data and make a nice demo form
upload and test
demo plan

only non-hidden questions
splash screen image

optimize form load
timezone on ODK timezone
no orphan places in Place.find_or_create_bits

MAJOR
options -- timezone display

FEATURES
sms broadcast

REFACTOR
stylesheet
refactor geocoding to create temporary places
permissions could be a lot cleaner

DON'T FORGET
user association checks
place association checks
require login

THINGS WE HAVE THAT NEPAL DOESN'T
- mobile submission
- multi-language
- automatic DOC generation and parsing
- robust geo engine
- roles & permissions
- questions shared across forms
- integration with high quality analytics platform
- inline tagging

THINGS NAPAL HAS THAT WE DON'T
- hierarchical form design (is this necessary?)
- richer text reporting
- customizable meta-data
- rich text in responses (is this necessary? tables may be nice to have...)

SCRATCH
- how should versions work?
  - forms can only be d/l'd with mobile devices once they're 'published'
  - # of downloads is tracked
  - can't edit a form if it's published -- have to unpublish first
  - unpublishing a downloaded form shows a big warning, since making changes could mess things up
  - but then what if you want to add a new question to a form? remove a question? change some wording? etc.
  - if you're convinced it won't affect the data, there should be an override
  - otherwise, you might want to make a new version
  - option 1: no versions, just provide a copy mechanism, let the user handle the naming conventions
    - downside here is you can't ask for all questions from all versions of a form, for instance
    - but perhaps the questions are the most important things..
  - option 2: each form has version, etc. could implement this later if it turns out to be impt...
- on response submission, we should
  - get the form ID from the submission
  - create a new response object with the given form ID
  - for each question in the submission that is also in the form definition, create an answer
    - but make sure that the given option_ids (if applicable) are actually valid for the given question
  - return
  
- form create/edit -- just the name and the type (published defaults to no)
  - 2 screen process: after initial form#edit screen, they go to form#add_question (with no create 'new' option)
  - javascript for arranging the questions. you can type in a new position and press enter and everything adjusts with graceful defaults or you can click an up or down arrow. click 'update form' to save. box warns if you try to leave the page (including deleting or viewing a question) before saving the order.
- form add_question
  - 2 options -- add existing or create new, similar to places
  - on submit they go back to form#edit
- form destroy
  - only when unpublished
  - only if no associations
- form download
  - creates a FormDownload record
- form unpublish
  - accessed from the main screen via link. if has been downloaded, shows a big box
  - once unpublished, downloads are erased
- question create/edit  - question
    - name, hint in all languages
    - type
    - code
    - option set,  (if applicable--show/hide with ajax)
  - questioning
    - req'd
    - hidden
  - this will be tricky b/c there are two models here.. question and questioning
  - so when there is a form being edited, we can include a hint that says (for this form)
- question destroy
  - only if nothing associated. otherwise just hide it in all the forms it appears in.