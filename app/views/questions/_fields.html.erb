<div class="question_fields">

  <% if form.mode == :edit %>
    <%= has_answers_warning(@question) if @question.has_answers? %>
    <%= published_warning(@question) if @question.published? %>
    <%= appears_elsewhere_warning(@question) unless @question.forms.empty? %>
  <% end %>
  
  <%= form_field(form, :code, :required => true, :maxlength => 20) %>

  <%# core fields should not be editable if don't have update_core permission %>
  <% old_f_mode = form.mode
     form.mode = :show if cannot?(:update_core, @question) %>

    <%= form_field(form, :qtype_name, :type => :select, :required => true, 
          :options => @question_types.map{|qt| [t(qt.name, :scope => :question_type), qt.name]}) %>

    <%# this is a partial because it contains more complex controls %>
    <%# the partial path is fully qualified because THIS partial might be included in several different contexts %>
    <%= form_field(form, :option_set_id, :partial => 'questions/option_set_select') %>      

    <div class="minmax">
      <%= form_field(form, :minimum, :partial => "questions/min_max_condition") %>
      <%= form_field(form, :maximum, :partial => "questions/min_max_condition") %>
    </div>

  <% form.mode = old_f_mode %>
  
  
  <% (configatron.preferred_locales).each_with_index do |lang, rank| %>
    <%= render("questions/title_and_hint", :lang => lang, :form => form, :rank => rank) %>
  <% end %>

  <%= form_field(form, :key, :type => :check_box) unless admin_mode? %>
  
  <%# new option set modal %>
  <% if form.mode != :show && can?(:create, OptionSet) %>
    <div class="new_option_set_form_wrapper" title="<%= t("option_set.create_link") %>">
    </div>
  <% end %>
</div>

<%= javascript_doc_ready do %>
  new ELMO.Views.QuestionForm({
    new_option_set_path: <%=j new_option_set_path.to_json.html_safe %>
  });
<% end %>